# Copyright (c) 2020 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build_overrides/chip.gni")
import("//build_overrides/nxp_sdk.gni")
import("${chip_root}/src/platform/device.gni") # declares chip_enable_wifi
import("${nxp_sdk_build_root}/nxp_sdk.gni") # declares some sdk args such as chip_with_ot_cli 
import("${chip_root}/src/platform/nxp/${nxp_platform}/args.gni") # declares all rt local args

declare_args() {
  # Location of the rt SDK.
  rt_sdk_root = ""
  hci_spinel_single_uart = false
  enable_otw_k32w0 = false
  #rt_nvm_component = "nvm_fwk"
  rt_nvm_component = "littlefs"
  wifi_enable_pta = false
  # RT platform
  rt_platform = ""
}

assert(rt_sdk_root != "", "rt_sdk_root must be specified")

template("rt_transceiver") {
  config("${target_name}_config") {
    include_dirs = []
    
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    _transceiver_include_dirs = [
        # Transceiver files
        "${rt_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver",
        "${rt_sdk_root}/middleware/sdmmc/common",
        "${rt_sdk_root}/middleware/sdmmc/sdio",
        "${rt_sdk_root}/middleware/sdmmc/host/usdhc",
        "${rt_sdk_root}/middleware/sdmmc/osa",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/wifidriver",
        "${rt_sdk_root}/middleware/wifi_nxp/incl",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/wlcmgr",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/port/os",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/incl",
    ]

    libs = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }

    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _transceiver_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

  }

  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    sources += [
        # Transceiver files
        "${rt_sdk_root}/middleware/sdmmc/common/fsl_sdmmc_common.c",
        "${rt_sdk_root}/middleware/sdmmc/sdio/fsl_sdio.c",
        "${rt_sdk_root}/middleware/sdmmc/host/usdhc/non_blocking/fsl_sdmmc_host.c",
        "${rt_sdk_root}/middleware/sdmmc/osa/fsl_sdmmc_osa.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/firmware_dnld.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sdio.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/sdio.c",
    ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${target_name}_config" ]
  }
}

template("rt_wifi") {
  config("${target_name}_config") {
    include_dirs = []
    
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    _wifi_include_dirs = [
        # Wi-Fi
        "${rt_sdk_root}/middleware/wifi_nxp/incl/port/lwip",
        "${rt_sdk_root}/middleware/wifi_nxp/port/lwip",
        "${rt_sdk_root}/middleware/wifi_nxp/incl",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/port/os",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/wifidriver",
        "${rt_sdk_root}/middleware/wifi_nxp/incl/wlcmgr",
        "${rt_sdk_root}/middleware/wifi_nxp/wifi_bt_firmware",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/incl",
    ]

    libs = []

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
    else {
      defines = []
    }

    defines += [
      "CHIP_DEVICE_CONFIG_ENABLE_WPA",
      "CONTROLLER_INIT_ESCAPE=1",
      "CONFIG_IPV6=1",               # missing in wifi_config.h
      "CONFIG_MAX_IPV6_ADDRESSES=5", # missing in wifi_config.h
    ]

    if (wifi_enable_pta) {
      defines += ["WIFI_PTA_ENABLED=1"]
    }

    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _wifi_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

  }

  source_set(target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    sources += [
        # Wi-Fi
        # "${rt_sdk_root}/middleware/wifi_nxp/dhcpd/dhcp-server-main.c",
        # "${rt_sdk_root}/middleware/wifi_nxp/dhcpd/dhcp-server.c",
        # "${rt_sdk_root}/middleware/wifi_nxp/dhcpd/dns-server.c",
        "${rt_sdk_root}/middleware/wifi_nxp/port/lwip/net.c",
        "${rt_sdk_root}/middleware/wifi_nxp/port/lwip/wifi_netif.c",
        "${rt_sdk_root}/middleware/wifi_nxp/cli/cli_utils.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wlcmgr/wlan.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wlcmgr/wlan_txpwrlimit_cfg.c",
        "${rt_sdk_root}/middleware/wifi_nxp/port/os/os.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11ac.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11d.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11h.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n_aggr.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_11n_rxreorder.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_api.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_cfp.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_cmdevt.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_glue.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_init.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_join.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_misc.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_scan.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_shim.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_cmd.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_cmdresp.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_event.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_ioctl.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_sta_rx.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_txrx.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_uap_cmdevent.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_uap_ioctl.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/mlan_wmm.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-debug.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-mem.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-sdio.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi-uap.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi.c",
        "${rt_sdk_root}/middleware/wifi_nxp/wifidriver/wifi_pwrmgr.c",
    ]

    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${target_name}_config" ]
  }
}

template("rt_sdk") {
  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    
    
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    # We want to treat SDK headers as system headers, so that warnings in those
    # headers are not fatal.  Therefore don't add them directly to include_dirs;
    # we will add them to cflags below instead.
    _sdk_include_dirs = [
#freertos includes
        "${rt_sdk_root}/rtos/freertos/freertos_kernel/include",
        "${rt_sdk_root}/rtos/freertos/freertos_kernel/portable/GCC/ARM_CM4F",
#CMSIS includes
        "${rt_sdk_root}/core/CMSIS/Core/Include",
#SDK components
        "${rt_sdk_root}/core/components/uart",
        "${rt_sdk_root}/core/components/serial_manager",
        "${rt_sdk_root}/core/components/lists",
        "${rt_sdk_root}/core/components/osa",
        "${rt_sdk_root}/core/components/common_task",
        "${rt_sdk_root}/core/components/log",
        "${rt_sdk_root}/core/components/timer_manager",
        "${rt_sdk_root}/core/components/timer",
        "${rt_sdk_root}/core/components/internal_flash",
        "${rt_sdk_root}/core/components/button",
        "${rt_sdk_root}/core/components/gpio",
        "${rt_sdk_root}/core/components/phy/device/phyksz8081",
        "${rt_sdk_root}/core/components/phy",
        "${rt_sdk_root}/core/components/phy/mdio/enet",
        "${rt_sdk_root}/core/components/wifi_bt_module/AzureWave/tx_pwr_limits",
        "${rt_sdk_root}/core/components/wifi_bt_module/Murata/tx_pwr_limits",
        "${rt_sdk_root}/core/components/wifi_bt_module/template",
        "${rt_sdk_root}/core/components/messaging",
        "${rt_sdk_root}/core/components/mem_manager",
        "${rt_sdk_root}/core/components/flash/mflash",
#Framework files
        "${rt_sdk_root}/middleware/wireless/framework/FunctionLib",
        "${rt_sdk_root}/middleware/wireless/framework/Common",
        "${rt_sdk_root}/middleware/wireless/framework/boards/${rt_platform}",
        "${rt_sdk_root}/middleware/wireless/framework/platform/${rt_platform}",
        "${rt_sdk_root}/middleware/wireless/framework/FileSystem",
#littlefs
        "${rt_sdk_root}/middleware/littlefs",
    ]

#OtaSupport
    if (chip_enable_ota_requestor) {
      _sdk_include_dirs += [
        "${rt_sdk_root}/middleware/wireless/framework/OtaSupport/Interface",
        "${rt_sdk_root}/middleware/wireless/framework/OtaSupport/Source",
        "${rt_sdk_root}/middleware/wireless/framework/platform/${rt_platform}/",
        ]
    }

    if (rt_nvm_component == "nvm_fwk")
    {
        _sdk_include_dirs += ["${rt_sdk_root}/middleware/wireless/framework/NVM/Interface"]
    }

    libs = []

    defines = [
        "__STARTUP_CLEAR_BSS",
        "__STARTUP_INITIALIZE_NONCACHEDATA",
        #"SERIAL_MANAGER_NON_BLOCKING_MODE=1",
        "SERIAL_MANAGER_TASK_HANDLE_RX_AVAILABLE_NOTIFY=1",
        "SERIAL_MANAGER_RING_BUFFER_FLOWCONTROL=1",
        "SDK_OS_FREE_RTOS",
    #Enable the OSA startup task
        "OSA_USED",
        "FSL_OSA_TASK_ENABLE",
    #Startup task stack size  todo :to remove 
        "gMainThreadStackSize_c=4096",
        "XIP_EXTERNAL_FLASH=1",
        "XIP_BOOT_HEADER_ENABLE=1",
        "FSL_SDK_ENABLE_DRIVER_CACHE_CONTROL=1",
        "SDK_COMPONENT_INTEGRATION=1",
        "FSL_DRIVER_TRANSFER_DOUBLE_WEAK_IRQ=0",
    # Serial Manager already in Non blocking state by default 
    #    but can be changed with other compile switch (DEBUG_CONSOLE_TRANSFER_NON_BLOCKING), 
    #    so better to explicitly set to 1 here except when DEBUG_CONSOLE_TRANSFER_NON_BLOCKING is set 
    #    "SERIAL_MANAGER_NON_BLOCKING_MODE=1",
    # For Debug Console, This flag is not use for Debug Console Light
        "DEBUG_CONSOLE_TRANSFER_NON_BLOCKING",
        "HAL_UART_ADAPTER_FIFO=1",
        "SDK_DEBUGCONSOLE_UART=1",
        "SERIAL_PORT_TYPE_UART=1",
        "CONFIG_ARM=1",
        "SERIAL_MANAGER_TASK_STACK_SIZE=4048",
    #LWIP common options
        "USE_RTOS=1",
        "RT_MATTER_SUPPORT",
      ]

    if (enable_otw_k32w0 == true)
    {
        defines += [
          "ENABLE_OTW_K32W0=1",
        ]
    }

    if (rt_nvm_component == "nvm_fwk")
    {
        defines += [
          #NVM flags
          "gNvStorageIncluded_d=1",
          "gNvTableKeptInRam_d=1",
          "NVM_NO_COMPONNET=1",
        ]
    }
    
    if (rt_nvm_component == "littlefs")
    {
        defines += ["LFS_THREADSAFE=1", "LFS_NO_DEBUG", "LFS_NO_ERROR", "LFS_NO_WARN"]
    }

    if (chip_enable_wifi || chip_enable_ethernet)
    {
      defines += [
        "SDK_DEBUGCONSOLE=1",
        "MCUXPRESSO_SDK",
        "PRINTF_FLOAT_ENABLE=0",
        "DEBUG",
        "__GCC",
        "__USE_CMSIS",
        "PRINT_FLOAT_ENABLE=0",
        "PRINTF_ADVANCED_ENABLE=1",
        "CR_INTEGER_PRINTF",
    # No OSA main task
        "FSL_OSA_MAIN_FUNC_ENABLE=0",
      ]
    }

    if (chip_enable_ethernet)
    {
      defines += [
        "FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE",
      ]
      defines -=[
        "DEBUG_CONSOLE_TRANSFER_NON_BLOCKING"
      ]
    }

    if (chip_with_ot_cli == 1) {
      defines += [ "CHIP_DEVICE_CONFIG_THREAD_ENABLE_CLI=1" ]
      #When ot_cli is enabled the debug console should be moved in UART2
      defines += [
        "BOARD_DEBUG_UART_BASEADDR=LPUART2",
        "BOARD_DEBUG_UART_INSTANCE=2U",
        "BOARD_UART_IRQ=LPUART2_IRQn",
        "BOARD_UART_IRQ_HANDLER=LPUART2_IRQHandler"
      ]
    }

    if (chip_enable_pairing_autostart == 1) {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_PAIRING_AUTOSTART=1" ]
    } else {
      defines += [ "CHIP_DEVICE_CONFIG_ENABLE_PAIRING_AUTOSTART=0" ]
    }

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
    cflags = []

    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }

    cflags += [
      "-Wno-unused-function",
      "-Wno-conversion",
      "-Wno-sign-compare",
      "-Wno-shadow",
      "-Wno-empty-body",
      "-Wno-implicit-fallthrough",
      "-Wno-stringop-truncation",
      "-Wno-unused-variable",
    ]


    if (chip_enable_openthread)
    {
      defines += ["CHIP_DEVICE_CONFIG_ENABLE_THREAD=1"]
    }

    if (chip_enable_ble)
    {
      defines += ["CHIP_DEVICE_CONFIG_ENABLE_CHIPOBLE=1"]
    }

    if (chip_enable_wifi)
    {
      if (!w8801_transceiver)
      {
          defines += ["CHIP_DEVICE_CONFIG_ENABLE_WIFI_STATION=1"]
      }
      else
      {
          defines += ["CHIP_DEVICE_CONFIG_ENABLE_WIFI_STATION=0"]
      }
    }

    # Now add our "system-header" include dirs
    foreach(include_dir, _sdk_include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

  }

  # TODO - Break up this monolith and make it configurable.
  source_set(sdk_target_name) {
    forward_variables_from(invoker, "*")

    if (!defined(sources)) {
      sources = []
    }

    sources += [
#freertos files
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/event_groups.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/croutine.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/list.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/portable/GCC/ARM_CM4F/port.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/queue.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/stream_buffer.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/tasks.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/timers.c",
    "${rt_sdk_root}/rtos/freertos/freertos_kernel/portable/MemMang/heap_4.c",

#SDK components
    "${rt_sdk_root}/core/components/serial_manager/fsl_component_serial_manager.c",
    "${rt_sdk_root}/core/components/serial_manager/fsl_component_serial_port_uart.c",
    "${rt_sdk_root}/core/components/uart/fsl_adapter_lpuart.c",
    "${rt_sdk_root}/core/components/lists/fsl_component_generic_list.c",
    "${rt_sdk_root}/core/components/osa/fsl_os_abstraction_free_rtos.c",
    "${rt_sdk_root}/core/components/log/fsl_component_log.c",
    "${rt_sdk_root}/core/components/log/fsl_component_log_backend_debugconsole.c",
    "${rt_sdk_root}/core/components/timer_manager/fsl_component_timer_manager.c",
    "${rt_sdk_root}/core/components/timer/fsl_adapter_pit.c",
    "${rt_sdk_root}/core/components/internal_flash/fsl_adapter_flexspi_nor_flash.c",
    "${rt_sdk_root}/core/components/button/fsl_component_button.c",
    "${rt_sdk_root}/core/components/gpio/fsl_adapter_igpio.c",
    "${rt_sdk_root}/core/components/phy/device/phyksz8081/fsl_phyksz8081.c",
    "${rt_sdk_root}/core/components/phy/mdio/enet/fsl_enet_mdio.c",
    "${rt_sdk_root}/core/components/messaging/fsl_component_messaging.c",
    "${rt_sdk_root}/core/components/mem_manager/fsl_component_mem_manager.c",
#Framework files
    "${rt_sdk_root}/middleware/wireless/framework/FunctionLib/FunctionLib.c",
    "${rt_sdk_root}/middleware/wireless/framework/boards/${rt_platform}/board_comp.c",
    "${rt_sdk_root}/middleware/wireless/framework/platform/${rt_platform}/fwk_platform.c",
    ]

#OtaSupport files
    if (chip_enable_ota_requestor) {
      sources += [
        "${rt_sdk_root}/middleware/wireless/framework/OtaSupport/Source/OtaSupport.c",
        "${rt_sdk_root}/middleware/wireless/framework/OtaSupport/Source/OtaPrivate.h",
        "${rt_sdk_root}/middleware/wireless/framework/OtaSupport/Source/ExternalMflash.c",
        "${rt_sdk_root}/middleware/wireless/framework/platform/${rt_platform}/fwk_platform_ota.c",
        ]
    }

    if (rt_nvm_component == "nvm_fwk")
    {
      sources += ["${rt_sdk_root}/middleware/wireless/framework/NVM/Source/NV_Flash.c",]
    }

    sources += [
      #littlefs
      "${rt_sdk_root}/middleware/littlefs/lfs.c",
      "${rt_sdk_root}/middleware/littlefs/lfs_util.c",
      "${rt_sdk_root}/middleware/wireless/framework/platform/${rt_platform}/fwk_platform_flash.c",
      "${rt_sdk_root}/middleware/wireless/framework/FileSystem/fwk_filesystem.c",
    ]


    if (!defined(public_configs)) {
      public_configs = []
    }

    public_configs += [ ":${sdk_target_name}_config" ]
  }
}
